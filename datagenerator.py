# -*- coding: utf-8 -*-
"""
Created on Sun Dec 27 16:29:25 2020

@author: sohaib
"""

import tensorflow.keras as k
from sklearn import preprocessing
import numpy as np

class DataGenerator(k.utils.Sequence):
    'Generates data for Keras'
    def __init__(self, list_IDs, labels, dir_path, batch_size=25, dim=(18,76800), shuffle=True):
        'Initialization'
        #print("data generator class init function")
        self.dim = dim # dimensions of data. by default it is 18,76800, a 2-D array
        self.batch_size = batch_size #size of batch generated by this class
        self.labels = labels #the actual values(Y) against training dataset. tested on list.
        self.list_IDs = list_IDs #names of files containing dataset. tested on list.
        self.shuffle = shuffle # do you wish to shuffle data or not? binary: True/False
        self.on_epoch_end()
        self.path = dir_path # path to the directory on your machine where files mentioned in list_IDs can be found

    def __len__(self):
        'Denotes the number of batches per epoch'
        return int(np.ceil(len(self.list_IDs) / self.batch_size))

    def __getitem__(self, index):
        'Generate one batch of data'
        # Generate indexes of the batch
        lmax=0
        #deals with possibility of fewer files than selected batch size
        if (index+1)*self.batch_size > len(self.labels):
            lmax = len(self.labels)
        else:
            lmax = (index+1)*self.batch_size
        indexes = self.indexes[index*self.batch_size:lmax]
        list_IDs_temp = [self.list_IDs[k] for k in indexes]
        # Generate data
        X, y = self.__data_generation(list_IDs_temp,self.path)

        return X, y

    def on_epoch_end(self):
        'Updates indexes after each epoch'
        self.indexes = np.arange(len(self.list_IDs))
        if self.shuffle == True:
            np.random.shuffle(self.indexes)

    def __data_generation(self, list_IDs_temp, path):
        'Generates data containing batch_size samples' # X : (n_samples, *dim)
        X = np.empty((len(list_IDs_temp), *self.dim))
        y = np.empty(len(list_IDs_temp), dtype=int)
        # Generate data
        for i, ID in enumerate(list_IDs_temp):
            X[i,] = np.load(path + ID + '.npy')

            # Store Y(target vals)
            y[i] = self.labels[i]
        X = np.expand_dims(X, -1)
        return X, y
